#include "Platform/Core/Result.h"

namespace nn::nex {}

/*
#define ERROR_CASE(code, message)                                                                  \
    case code:                                                                                     \
        return message;

#define ERROR_EMPTY(code) case code:

namespace nn::nex {
const char* qResult::GetReturnCodeString() const {
    u32 errorCode;
    const char* result;
    errorCode = m_ErrorCode;
    if ((m_ErrorCode & 0x80000000) == 0)
        return "qResult Success Return Code";
    if (errorCode > 0x80060000) {
        if (errorCode <= 0x80680000) {
            switch (errorCode) {
                ERROR_CASE(0x80060001, "DOCore::StationNotReached")
                ERROR_CASE(0x80060002, "DOCore::TargetStationDisconnect")
                ERROR_CASE(0x80060003, "DOCore::LocalStationLeaving")
                ERROR_CASE(0x80060004, "DOCore::ObjectNotFound")
                ERROR_CASE(0x80060005, "DOCore::InvalidRole")
                ERROR_CASE(0x80060006, "DOCore::CallTimeout")
                ERROR_CASE(0x80060007, "DOCore::RMCDispatchFailed")
                ERROR_CASE(0x80060008, "DOCore::MigrationInProgress")
                ERROR_CASE(0x80060009, "DOCore::NoAuthority")
                ERROR_CASE(0x8006000A, "DOCore::NoTargetStationSpecified")
                ERROR_CASE(0x8006000B, "DOCore::JoinFailed")
                ERROR_CASE(0x8006000C, "DOCore::JoinDenied")
                ERROR_CASE(0x8006000D, "DOCore::ConnectivityTestFailed")
                ERROR_CASE(0x8006000E, "DOCore::Unknown")
                ERROR_CASE(0x8006000F, "DOCore::UnfreedReferences")
                ERROR_CASE(0x80060010, "DOCore::JobTerminationFailed")
                ERROR_CASE(0x80060011, "DOCore::InvalidState")
                ERROR_CASE(0x80060012, "DOCore::FaultRecoveryFatal")
                ERROR_CASE(0x80060013, "DOCore::FaultRecoveryJobProcessFailed")
                ERROR_CASE(0x80060014, "DOCore::StationInconsistency")
                ERROR_CASE(0x80060015, "DOCore::AbnormalMasterState")
                ERROR_CASE(0x80060016, "DOCore::VersionMismatch")
            default:
                switch (errorCode) {
                    ERROR_CASE(0x80650000, "FPD::NotInitialized")
                    ERROR_CASE(0x80650001, "FPD::AlreadyInitialized")
                    ERROR_CASE(0x80650002, "FPD::NotConnected")
                    ERROR_CASE(0x80650003, "FPD::Connected")
                    ERROR_CASE(0x80650004, "FPD::InitializationFailure")
                    ERROR_CASE(0x80650005, "FPD::OutOfMemory")
                    ERROR_CASE(0x80650006, "FPD::RmcFailed")
                    ERROR_CASE(0x80650007, "FPD::InvalidArgument")
                    ERROR_CASE(0x80650008, "FPD::InvalidLocalAccountID")
                    ERROR_CASE(0x80650009, "FPD::InvalidPrincipalID")
                    ERROR_CASE(0x8065000A, "FPD::InvalidLocalFriendCode")
                    ERROR_CASE(0x8065000B, "FPD::LocalAccountNotExists")
                    ERROR_CASE(0x8065000C, "FPD::LocalAccountNotLoaded")
                    ERROR_CASE(0x8065000D, "FPD::LocalAccountAlreadyLoaded")
                    ERROR_CASE(0x8065000E, "FPD::FriendAlreadyExists")
                    ERROR_CASE(0x8065000F, "FPD::FriendNotExists")
                    ERROR_CASE(0x80650010, "FPD::FriendNumMax")
                    ERROR_CASE(0x80650011, "FPD::NotFriend")
                    ERROR_CASE(0x80650012, "FPD::FileIO")
                    ERROR_CASE(0x80650013, "FPD::P2PInternetProhibited")
                    ERROR_CASE(0x80650014, "FPD::Unknown")
                default:
                    switch (errorCode) {
                        ERROR_CASE(0x80670001, "Ranking::NotInitialized")
                        ERROR_CASE(0x80670002, "Ranking::InvalidArgument")
                        ERROR_CASE(0x80670003, "Ranking::RegistrationError")
                        ERROR_CASE(0x80670005, "Ranking::NotFound")
                        ERROR_CASE(0x80670006, "Ranking::InvalidScore")
                        ERROR_CASE(0x80670007, "Ranking::InvalidDataSize")
                        ERROR_CASE(0x80670009, "Ranking::PermissionDenied")
                        ERROR_CASE(0x8067000A, "Ranking::Unknown")
                        ERROR_CASE(0x8067000B, "Ranking::NotImplemented")
                    default:
                        return "Unknown qResult Return Code";
                    }
                }
            }
        } else if (errorCode > 0x806C0000) {
            if (errorCode > 0x80700000) {
                if (errorCode > 0x80710000) {
                    switch (errorCode) {
                        ERROR_CASE(0x80710001, "Ranking2::Unknown")
                        ERROR_CASE(0x80710002, "Ranking2::InvalidArgument")
                        ERROR_CASE(0x80710003, "Ranking2::InvalidScore")
                    default:
                        return "Unknown qResult Return Code";
                    }
                } else {
                    switch (errorCode) {
                        ERROR_CASE(0x80700001, "Subscriber::Unknown")
                        ERROR_CASE(0x80700002, "Subscriber::InvalidArgument")
                        ERROR_CASE(0x80700003, "Subscriber::OverLimit")
                        ERROR_CASE(0x80700004, "Subscriber::PermissionDenied")
                    default:
                        return "Unknown qResult Return Code";
                    }
                }
            } else {
                switch (errorCode) {
                    ERROR_CASE(0x806F0001, "MatchmakeReferee::Unknown")
                    ERROR_CASE(0x806F0002, "MatchmakeReferee::InvalidArgument")
                    ERROR_CASE(0x806F0003, "MatchmakeReferee::AlreadyExists")
                    ERROR_CASE(0x806F0004, "MatchmakeReferee::NotParticipatedGathering")
                    ERROR_CASE(0x806F0005, "MatchmakeReferee::NotParticipatedRound")
                    ERROR_CASE(0x806F0006, "MatchmakeReferee::StatsNotFound")
                    ERROR_CASE(0x806F0007, "MatchmakeReferee::RoundNotFound")
                    ERROR_CASE(0x806F0008, "MatchmakeReferee::RoundArbitrated")
                default:
                    switch (errorCode) {
                        ERROR_CASE(0x806C0001, "ServiceItem::Unknown")
                        ERROR_CASE(0x806C0002, "ServiceItem::InvalidArgument")
                        ERROR_CASE(0x806C0003, "ServiceItem::EShopUnknownHttpError")
                        ERROR_CASE(0x806C0004, "ServiceItem::EShopResponseParseError")
                        ERROR_CASE(0x806C0005, "ServiceItem::NotOwned")
                        ERROR_CASE(0x806C0006, "ServiceItem::InvalidLimitationType")
                        ERROR_CASE(0x806C0007, "ServiceItem::ConsumptionRightShortage")
                    default:
                        return "Unknown qResult Return Code";
                    }
                }
            }
        } else {
            switch (errorCode) {
                ERROR_CASE(0x80680001, "Authentication::NASAuthenticateError")
                ERROR_CASE(0x80680002, "Authentication::TokenParseError")
                ERROR_CASE(0x80680003, "Authentication::HttpConnectionError")
                ERROR_CASE(0x80680004, "Authentication::HttpDNSError")
                ERROR_CASE(0x80680005, "Authentication::HttpGetProxySetting")
                ERROR_CASE(0x80680006, "Authentication::TokenExpired")
                ERROR_CASE(0x80680007, "Authentication::ValidationFailed")
                ERROR_CASE(0x80680008, "Authentication::InvalidParam")
                ERROR_CASE(0x80680009, "Authentication::PrincipalIdUnmatched")
                ERROR_CASE(0x8068000A, "Authentication::MoveCountUnmatch")
                ERROR_CASE(0x8068000B, "Authentication::UnderMaintenance")
                ERROR_CASE(0x8068000C, "Authentication::UnsupportedVersion")
                ERROR_CASE(0x8068000D, "Authentication::ServerVersionIsOld")
                ERROR_CASE(0x8068000E, "Authentication::Unknown")
                ERROR_CASE(0x8068000F, "Authentication::ClientVersionIsOld")
                ERROR_CASE(0x80680010, "Authentication::AccountLibraryError")
                ERROR_CASE(0x80680011, "Authentication::ServiceNoLongerAvailable")
                ERROR_CASE(0x80680012, "Authentication::UnknownApplication")
                ERROR_CASE(0x80680013, "Authentication::ApplicationVersionIsOld")
                ERROR_CASE(0x80680014, "Authentication::OutOfService")
            default:
                switch (errorCode) {
                    ERROR_CASE(0x80690001, "DataStore::Unknown")
                    ERROR_CASE(0x80690002, "DataStore::InvalidArgument")
                    ERROR_CASE(0x80690003, "DataStore::PermissionDenied")
                    ERROR_CASE(0x80690004, "DataStore::NotFound")
                    ERROR_CASE(0x80690005, "DataStore::AlreadyLocked")
                    ERROR_CASE(0x80690006, "DataStore::UnderReviewing")
                    ERROR_CASE(0x80690007, "DataStore::Expired")
                    ERROR_CASE(0x80690008, "DataStore::InvalidCheckToken")
                    ERROR_CASE(0x80690009, "DataStore::SystemFileError")
                    ERROR_CASE(0x8069000A, "DataStore::OverCapacity")
                    ERROR_CASE(0x8069000B, "DataStore::OperationNotAllowed")
                    ERROR_CASE(0x8069000C, "DataStore::InvalidPassword")
                    ERROR_CASE(0x8069000D, "DataStore::ValueNotEqual")
                default:
                    return "Unknown qResult Return Code";
                }
            }
        }
    } else if (errorCode > 0x80030000) {
        switch (errorCode) {
            ERROR_CASE(0x80030001, "RendezVous::ConnectionFailure")
            ERROR_CASE(0x80030002, "RendezVous::NotAuthenticated")
            ERROR_EMPTY(0x80030003)
            ERROR_EMPTY(0x80030004)
            ERROR_EMPTY(0x80030005)
            ERROR_EMPTY(0x80030006)
            ERROR_EMPTY(0x80030007)
            ERROR_EMPTY(0x80030008)
            ERROR_EMPTY(0x80030009)
            ERROR_EMPTY(0x8003000A)
            ERROR_EMPTY(0x8003000B)
            ERROR_EMPTY(0x8003000C)
            ERROR_EMPTY(0x8003000D)
            ERROR_EMPTY(0x8003000E)
            ERROR_EMPTY(0x8003000F)
            ERROR_EMPTY(0x80030010)
            ERROR_EMPTY(0x80030011)
            ERROR_EMPTY(0x80030012)
            ERROR_EMPTY(0x80030013)
            ERROR_EMPTY(0x80030014)
            ERROR_EMPTY(0x80030015)
            ERROR_EMPTY(0x80030016)
            ERROR_EMPTY(0x80030017)
            ERROR_EMPTY(0x80030018)
            ERROR_EMPTY(0x80030019)
            ERROR_EMPTY(0x8003001A)
            ERROR_EMPTY(0x8003001B)
            ERROR_EMPTY(0x8003001C)
            ERROR_EMPTY(0x8003001D)
            ERROR_EMPTY(0x8003001E)
            ERROR_EMPTY(0x8003001F)
            ERROR_EMPTY(0x80030020)
            ERROR_EMPTY(0x80030021)
            ERROR_EMPTY(0x80030022)
            ERROR_EMPTY(0x80030023)
            ERROR_EMPTY(0x80030024)
            ERROR_EMPTY(0x80030025)
            ERROR_EMPTY(0x80030026)
            ERROR_EMPTY(0x80030027)
            ERROR_EMPTY(0x80030028)
            ERROR_EMPTY(0x80030029)
            ERROR_EMPTY(0x8003002A)
            ERROR_EMPTY(0x8003002B)
            ERROR_EMPTY(0x8003002C)
            ERROR_EMPTY(0x8003002D)
            ERROR_EMPTY(0x8003002E)
            ERROR_EMPTY(0x8003002F)
            ERROR_EMPTY(0x80030030)
            ERROR_EMPTY(0x80030031)
            ERROR_EMPTY(0x80030032)
            ERROR_EMPTY(0x80030033)
            ERROR_EMPTY(0x80030034)
            ERROR_EMPTY(0x80030035)
            ERROR_EMPTY(0x80030036)
            ERROR_EMPTY(0x80030037)
            ERROR_EMPTY(0x80030038)
            ERROR_EMPTY(0x80030039)
            ERROR_EMPTY(0x8003003A)
            ERROR_EMPTY(0x8003003B)
            ERROR_EMPTY(0x8003003C)
            ERROR_EMPTY(0x8003003D)
            ERROR_EMPTY(0x8003003E)
            ERROR_EMPTY(0x8003003F)
            ERROR_EMPTY(0x80030040)
            ERROR_EMPTY(0x80030041)
            ERROR_EMPTY(0x80030042)
            ERROR_EMPTY(0x80030043)
            ERROR_EMPTY(0x80030044)
            ERROR_EMPTY(0x80030045)
            ERROR_EMPTY(0x80030046)
            ERROR_EMPTY(0x80030047)
            ERROR_EMPTY(0x80030048)
            ERROR_EMPTY(0x80030049)
            ERROR_EMPTY(0x8003004A)
            ERROR_EMPTY(0x8003004B)
            ERROR_EMPTY(0x8003004C)
            ERROR_EMPTY(0x8003004D)
            ERROR_EMPTY(0x8003004E)
            ERROR_EMPTY(0x8003004F)
            ERROR_EMPTY(0x80030050)
            ERROR_EMPTY(0x80030051)
            ERROR_EMPTY(0x80030052)
            ERROR_EMPTY(0x80030053)
            ERROR_EMPTY(0x80030054)
            ERROR_EMPTY(0x80030055)
            ERROR_EMPTY(0x80030056)
            ERROR_EMPTY(0x80030057)
            ERROR_EMPTY(0x80030058)
            ERROR_EMPTY(0x80030059)
            ERROR_EMPTY(0x8003005A)
            ERROR_EMPTY(0x8003005B)
            ERROR_EMPTY(0x8003005C)
            ERROR_EMPTY(0x8003005D)
            ERROR_EMPTY(0x8003005E)
            ERROR_EMPTY(0x8003005F)
            ERROR_EMPTY(0x80030060)
            ERROR_EMPTY(0x80030061)
            ERROR_EMPTY(0x80030062)
            ERROR_EMPTY(0x80030063)
            ERROR_EMPTY(0x80030074)
            ERROR_EMPTY(0x80030077)
            ERROR_EMPTY(0x80030078)
            ERROR_EMPTY(0x80030079)
            ERROR_EMPTY(0x8003007A)
            ERROR_EMPTY(0x8003007B)
            ERROR_EMPTY(0x8003007C)
            ERROR_EMPTY(0x8003007D)
            ERROR_EMPTY(0x8003007E)
            ERROR_EMPTY(0x8003007F)
            ERROR_EMPTY(0x80030080)
            ERROR_EMPTY(0x80030081)
            ERROR_EMPTY(0x80030082)
            ERROR_EMPTY(0x80030083)
            ERROR_EMPTY(0x80030084)
            ERROR_EMPTY(0x80030085)
            ERROR_EMPTY(0x80030086)
            ERROR_EMPTY(0x80030087)
            ERROR_EMPTY(0x80030088)
            ERROR_EMPTY(0x80030089)
            ERROR_EMPTY(0x8003008A)
            ERROR_EMPTY(0x8003008B)
            ERROR_EMPTY(0x8003008C)
            ERROR_EMPTY(0x8003008D)
            ERROR_EMPTY(0x8003008E)
            ERROR_EMPTY(0x8003008F)
            ERROR_EMPTY(0x80030090)
            ERROR_EMPTY(0x80030091)
            ERROR_EMPTY(0x80030092)
            ERROR_EMPTY(0x80030093)
            ERROR_EMPTY(0x80030094)
            ERROR_EMPTY(0x80030095)
            ERROR_EMPTY(0x80030096)
            ERROR_EMPTY(0x80030097)
            ERROR_EMPTY(0x80030098)
            ERROR_EMPTY(0x80030099)
            ERROR_EMPTY(0x8003009A)
            ERROR_EMPTY(0x8003009B)
            ERROR_EMPTY(0x8003009C)
            ERROR_EMPTY(0x8003009D)
            ERROR_EMPTY(0x8003009E)
            ERROR_EMPTY(0x8003009F)
            ERROR_EMPTY(0x800300A0)
            ERROR_EMPTY(0x800300A1)
            ERROR_EMPTY(0x800300A2)
            ERROR_EMPTY(0x800300A3)
            ERROR_EMPTY(0x800300A4)
            ERROR_EMPTY(0x800300A5)
            ERROR_EMPTY(0x800300A6)
            ERROR_EMPTY(0x800300A7)
            ERROR_EMPTY(0x800300A8)
            ERROR_EMPTY(0x800300A9)
            ERROR_EMPTY(0x800300AA)
            ERROR_EMPTY(0x800300AB)
            ERROR_EMPTY(0x800300AC)
            ERROR_EMPTY(0x800300AD)
            ERROR_EMPTY(0x800300AE)
            ERROR_EMPTY(0x800300AF)
            ERROR_EMPTY(0x800300B0)
            ERROR_EMPTY(0x800300B1)
            ERROR_EMPTY(0x800300B2)
            ERROR_EMPTY(0x800300B3)
            ERROR_EMPTY(0x800300B4)
            ERROR_EMPTY(0x800300B5)
            ERROR_EMPTY(0x800300B6)
            ERROR_EMPTY(0x800300B7)
            ERROR_EMPTY(0x800300B8)
            ERROR_EMPTY(0x800300B9)
            ERROR_EMPTY(0x800300BA)
            ERROR_EMPTY(0x800300BB)
            ERROR_EMPTY(0x800300BC)
            ERROR_EMPTY(0x800300BD)
            ERROR_EMPTY(0x800300BE)
            ERROR_EMPTY(0x800300BF)
            ERROR_EMPTY(0x800300C0)
            ERROR_EMPTY(0x800300C1)
            ERROR_EMPTY(0x800300C2)
            ERROR_EMPTY(0x800300C3)
            ERROR_EMPTY(0x800300C4)
            ERROR_EMPTY(0x800300C5)
            ERROR_EMPTY(0x800300C6)
            ERROR_CASE(0x800300C7, "Unknown qResult Return Code")
            ERROR_CASE(0x80030064, "RendezVous::InvalidUsername")
            ERROR_CASE(0x80030065, "RendezVous::InvalidPassword")
            ERROR_CASE(0x80030066, "RendezVous::UsernameAlreadyExists")
            ERROR_CASE(0x80030067, "RendezVous::AccountDisabled")
            ERROR_CASE(0x80030068, "RendezVous::AccountExpired")
            ERROR_CASE(0x80030069, "RendezVous::ConcurrentLoginDenied")
            ERROR_CASE(0x8003006A, "RendezVous::EncryptionFailure")
            ERROR_CASE(0x8003006B, "RendezVous::InvalidPID")
            ERROR_CASE(0x8003006C, "RendezVous::MaxConnectionsReached")
            ERROR_CASE(0x8003006D, "RendezVous::InvalidGID")
            ERROR_CASE(0x8003006E, "RendezVous::InvalidControlScriptID")
            ERROR_CASE(0x8003006F, "RendezVous::InvalidOperationInLiveEnvironment")
            ERROR_CASE(0x80030070, "RendezVous::DuplicateEntry")
            ERROR_CASE(0x80030071, "RendezVous::ControlScriptFailure")
            ERROR_CASE(0x80030072, "RendezVous::ClassNotFound")
            ERROR_CASE(0x80030073, "RendezVous::SessionVoid")
            ERROR_CASE(0x80030075, "RendezVous::DDLMismatch")
            ERROR_CASE(0x80030076, "RendezVous::InvalidConfiguration")
            ERROR_CASE(0x800300C8, "RendezVous::SessionFull")
            ERROR_CASE(0x800300C9, "RendezVous::InvalidGatheringPassword")
            ERROR_CASE(0x800300CA, "RendezVous::WithoutParticipationPeriod")
            ERROR_CASE(0x800300CB, "RendezVous::PersistentGatheringCreationMax")
            ERROR_CASE(0x800300CC, "RendezVous::PersistentGatheringParticipationMax")
            ERROR_CASE(0x800300CD, "RendezVous::DeniedByParticipants")
            ERROR_CASE(0x800300CE, "RendezVous::ParticipantInBlockList")
            ERROR_CASE(0x800300CF, "RendezVous::GameServerMaintenance")
            ERROR_CASE(0x800300D0, "RendezVous::OperationPostpone")
            ERROR_CASE(0x800300D1, "RendezVous::OutOfRatingRange")
            ERROR_CASE(0x800300D2, "RendezVous::ConnectionDisconnected")
            ERROR_CASE(0x800300D3, "RendezVous::InvalidOperation")
            ERROR_CASE(0x800300D4, "RendezVous::NotParticipatedGathering")
            ERROR_CASE(0x800300D5, "RendezVous::MatchmakeSessionUserPasswordUnmatch")
            ERROR_CASE(0x800300D6, "RendezVous::MatchmakeSessionSystemPasswordUnmatch")
            ERROR_CASE(0x800300D7, "RendezVous::UserIsOffline")
            ERROR_CASE(0x800300D8, "RendezVous::AlreadyParticipatedGathering")
            ERROR_CASE(0x800300D9, "RendezVous::PermissionDenied")
            ERROR_CASE(0x800300DA, "RendezVous::NotFriend")
            ERROR_CASE(0x800300DB, "RendezVous::SessionClosed")
            ERROR_CASE(0x800300DC, "RendezVous::DatabaseTemporarilyUnavailable")
            ERROR_CASE(0x800300DD, "RendezVous::InvalidUniqueId")
            ERROR_CASE(0x800300DE, "RendezVous::MatchmakingWithdrawn")
            ERROR_CASE(0x800300DF, "RendezVous::LimitExceeded")
            ERROR_CASE(0x800300E0, "RendezVous::AccountTemporarilyDisabled")
        default:
            switch (errorCode) {
                ERROR_CASE(0x80050001, "Transport::Unknown")
                ERROR_CASE(0x80050002, "Transport::ConnectionFailure")
                ERROR_CASE(0x80050003, "Transport::InvalidUrl")
                ERROR_CASE(0x80050004, "Transport::InvalidKey")
                ERROR_CASE(0x80050005, "Transport::InvalidURLType")
                ERROR_CASE(0x80050006, "Transport::DuplicateEndpoint")
                ERROR_CASE(0x80050007, "Transport::IOError")
                ERROR_CASE(0x80050008, "Transport::Timeout")
                ERROR_CASE(0x80050009, "Transport::ConnectionReset")
                ERROR_CASE(0x8005000A, "Transport::IncorrectRemoteAuthentication")
                ERROR_CASE(0x8005000B, "Transport::ServerRequestError")
                ERROR_CASE(0x8005000C, "Transport::DecompressionFailure")
                ERROR_CASE(0x8005000D, "Transport::ReliableSendBufferFullFatal")
                ERROR_CASE(0x8005000E, "Transport::UPnPCannotInit")
                ERROR_CASE(0x8005000F, "Transport::UPnPCannotAddMapping")
                ERROR_CASE(0x80050010, "Transport::NatPMPCannotInit")
                ERROR_CASE(0x80050011, "Transport::NatPMPCannotAddMapping")
                ERROR_CASE(0x80050012, "Unknown qResult Return Code")
                ERROR_CASE(0x80050013, "Transport::UnsupportedNAT")
                ERROR_CASE(0x80050014, "Transport::DnsError")
                ERROR_CASE(0x80050015, "Transport::ProxyError")
                ERROR_CASE(0x80050016, "Transport::DataRemaining")
                ERROR_CASE(0x80050017, "Transport::NoBuffer")
                ERROR_CASE(0x80050018, "Transport::NotFound")
                ERROR_CASE(0x80050019, "Transport::TemporaryServerError")
                ERROR_CASE(0x8005001A, "Transport::PermanentServerError")
                ERROR_CASE(0x8005001B, "Transport::ServiceUnavailable")
                ERROR_CASE(0x8005001C, "Transport::ReliableSendBufferFull")
                ERROR_CASE(0x8005001D, "Transport::InvalidStation")
                ERROR_CASE(0x8005001E, "Transport::InvalidSubStreamID")
                ERROR_CASE(0x8005001F, "Transport::PacketBufferFull")
                ERROR_CASE(0x80050020, "Transport::NatTraversalError")
                ERROR_CASE(0x80050021, "Transport::NatCheckError")
            default:
                switch (errorCode) {
                    ERROR_CASE(0x80040001, "PythonCore::Exception")
                    ERROR_CASE(0x80040002, "PythonCore::TypeError")
                    ERROR_CASE(0x80040003, "PythonCore::IndexError")
                    ERROR_CASE(0x80040004, "PythonCore::InvalidReference")
                    ERROR_CASE(0x80040005, "PythonCore::CallFailure")
                    ERROR_CASE(0x80040006, "PythonCore::MemoryError")
                    ERROR_CASE(0x80040007, "PythonCore::KeyError")
                    ERROR_CASE(0x80040008, "PythonCore::OperationError")
                    ERROR_CASE(0x80040009, "PythonCore::ConversionError")
                    ERROR_CASE(0x8004000A, "PythonCore::ValidationError")
                default:
                    return "Unknown qResult Return Code";
                }
            }
        }
    } else {
        switch (errorCode) {
            ERROR_CASE(0x80010001, "Core::Unknown")
            ERROR_CASE(0x80010002, "Core::NotImplemented")
            ERROR_CASE(0x80010003, "Core::InvalidPointer")
            ERROR_CASE(0x80010004, "Core::OperationAborted")
            ERROR_CASE(0x80010005, "Core::Exception")
            ERROR_CASE(0x80010006, "Core::AccessDenied")
            ERROR_CASE(0x80010007, "Core::InvalidHandle")
            ERROR_CASE(0x80010008, "Core::InvalidIndex")
            ERROR_CASE(0x80010009, "Core::OutOfMemory")
            ERROR_CASE(0x8001000A, "Core::InvalidArgument")
            ERROR_CASE(0x8001000B, "Core::Timeout")
            ERROR_CASE(0x8001000C, "Core::InitializationFailure")
            ERROR_CASE(0x8001000D, "Core::CallInitiationFailure")
            ERROR_CASE(0x8001000E, "Core::RegistrationError")
            ERROR_CASE(0x8001000F, "Core::BufferOverflow")
            ERROR_CASE(0x80010010, "Core::InvalidLockState")
            ERROR_CASE(0x80010011, "Core::InvalidSequence")
            ERROR_CASE(0x80010012, "Core::SystemError")
        default:
            if (errorCode == 0x80020001) {
                return "DDL::InvalidSignature";
            } else {
                if (errorCode != 0x80020002)
                    return "Unknown qResult Return Code";
                return "DDL::IncorrectVersion";
            }
        }
    }
    return result;
}
}  // namespace nn::nex

*/